package Apps;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import Utils.MapperFunction;

/* Implement Mapper function class for Distributed Grep Application
 * 
 *  Distributed Grep: The map function emits a line if it
 *	matches a supplied pattern. The reduce function is an
 *	identity function that just copies the supplied intermediate
 *	data to the output.
 */

public class GrepMapperFunction implements MapperFunction<String, String> {
	String pattern = "of"; //Pattern we want to find
	
	/* Function:
	 * Mapper function for "Distributed Grep" Application
	 * Input:
	 * String Key: Document name
	 * String Value: Line that matches the defined pattern
	 * Output:
	 * Iterator<Map.Entry<String, String>> res: <key,value> pairs generated by value
	 */
	@Override
	 public Iterator<Map.Entry<String, String>> call(String key, String val) { 
		 List<Map.Entry<String, String>> res = new ArrayList<Map.Entry<String, String>>();
		 
		 if(val.indexOf(pattern) >= 0) res.add(new AbstractMap.SimpleEntry<String, String>(key, val));
			 
		 return res.iterator();
	 } 
}
