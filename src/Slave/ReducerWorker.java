package Slave;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import Utils.ReducerFunction;

/* Class ReducerWorker represent a reducer process created by master, it is responsible for 
 * performing reducer job according to the user-defined reducer function and its own assigned intermediate files.
 * It will generate output files for the intermediate files and notify Master once the
 * reducer job is finished through passing "Over" to the master listener.
 */
public class ReducerWorker extends Worker {
	String outputFile = "";//name of output file
	ReducerFunction reducerFunction;//User-defined reducer function
	TreeMap<String, List<String>> inputEntries;// sorted <key,value> pairs of intermediate file
	TreeMap<String, String> outputEntries;// sorted <key,value> pairs of output files
	String[] intermediates;//Locations of intermediate files
	
	/* Function:
	 * Entry point of reducer process, will create a reducer to perform 
	 * reducer jobs and return result to master
	 * 
	 * Input:
	 * String args[0]: reducer id
	 * String args[1]: User-defined reducer function
	 * String args[2]: file locations of intermediate files
	 * String args[3]: file name of output files generated by MapReduce
	 * Output:
	 * None
	 */
	public static void main(String[] args) {
		//Initialization network socket
        try { 
            socket = new Socket(masterAddress, masterPort); 
            System.out.println("Reducer Connected"); 
            
            input  = new DataInputStream(System.in); 
            out    = new DataOutputStream(socket.getOutputStream()); 
        } catch(UnknownHostException u) { 
            System.out.println(u); 
        } catch(IOException i) { 
            System.out.println(i); 
        }
        
        
		//Create MapperWorker
		ReducerWorker reducerWorker = new ReducerWorker(args[0], args[1], args[2].split(","), args[3]);
		outputLog(outputArgs(args), reducerWorker.id);
		reducerWorker.run();
 
        //Notify the master that reducer job is done
        try {
        	Thread.sleep(1000);
        	out.writeUTF(String.format("Over,,%s", args[3]));
        	Thread.sleep(2000);
            input.close(); 
            out.close(); 
            socket.close(); 
        } catch(IOException | InterruptedException i) { 
            System.out.println(i); 
        } 
	}
	
	
	/* Function:
	 * Reducer Constructor
	 * 
	 * Input:
	 * String s_id: reducer id
	 * String reducerFunction: User-defined reducer function
	 * String intermediateLocs: file locations of intermediate files
	 * String outFile: file name of output files generated by MapReduce
	 * Output:
	 * None
	 */
	public ReducerWorker(String id, String reducerFunction, String[] intermediates, String outputFile) {
		
		try {
			//Initialize member variables
			Class myClass = Class.forName(reducerFunction);
			Class[] types = {};
			Constructor constructor = myClass.getConstructor(types);
			Object[] parameters = {};
			this.reducerFunction = (ReducerFunction) constructor.newInstance(parameters);
			this.intermediates = intermediates;
			this.id = id;
			this.outputFile = outputFile;
			this.inputEntries = new TreeMap<String, List<String>>();
			this.outputEntries = new TreeMap<String, String>();
			

			//Read and Sort Intermediate files by key (Using treeMap)


			BufferedReader reader = new BufferedReader(new FileReader(intermediates[Integer.valueOf(id)]));
			String key = reader.readLine();
			
			while (key != null) {
				String value = reader.readLine();
				System.out.println(String.format("Read key-value pair=(%s, %s)", key, value));

				if(!inputEntries.containsKey(key)) inputEntries.put(key, new ArrayList<String>());
				inputEntries.get(key).add(value);
				
				key = reader.readLine();
			}
			try {
				out.writeUTF("Mapper"+id+",, finished!!!!");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			reader.close();

		} catch (ClassNotFoundException e1) {
			e1.printStackTrace();
		} catch (Exception e) {
			
			try {
				out.writeUTF("Error,," + e.toString());
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			
		}
	}
	
	/* Function:
	 * Perform reducer job
	 * 
	 * Input:
	 * Noe
	 * Output:
	 * None
	 */
	public void run() {
		//Perform reducer function on each <key,value> pair in assigned intermediate file
		for(String key : inputEntries.keySet()) {
			String res = (String) reducerFunction.call(key, inputEntries.get(key).iterator());
			outputEntries.put(key, res);
		}
		//Output final result to output files
		outputFinalFile();
	}
	
	/* Function:
	 * Output the final result of <key,value> pairs to the final output files
	 * 
	 * Input:
	 * None
	 * Output:
	 * None
	 */
	public void outputFinalFile() {
		FileWriter fstream;
		BufferedWriter out;
 		
		try {
			System.out.println("Output intermediate to loc:" + outputFile);
			fstream =  new FileWriter(outputFile, true);
			out = new BufferedWriter(fstream);

			for(String key : outputEntries.keySet()) {
				out.write(String.format("%s:%s", key, outputEntries.get(key)));
				out.newLine();
			}		
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/* Function:
	 * Print input Args for debug
	 * 
	 * Input:
	 * String[] args: input args
	 * Output:
	 * String res: joined string of input args
	 */
	public static String outputArgs(String[] args) {
		StringBuilder res = new StringBuilder();
		for(String s : args) {
			res.append(s).append(" ");
		}
		res.setLength(res.length() - 1);
		return res.toString();
	}
	
	/* Function:
	 * Output Mapper Log to Master Listener
	 * 
	 * Input:
	 * String log: Content of log
	 * String id: Unique identifier for the mapper
	 * Output:
	 * None
	 */
	public static void outputLog(String log, String id) {
		try {
			out.writeUTF(String.format("Log,,Reducer %s: %s", id, log));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
